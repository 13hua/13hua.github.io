<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[mpvue微信小程序踩坑笔记(一)]]></title>
    <url>%2F2019%2F01%2F19%2Fwx-study-1%2F</url>
    <content type="text"></content>
      <tags>
        <tag>mpvue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于单元测试mocha的学习笔记]]></title>
    <url>%2F2018%2F11%2F03%2Fmocha%2F</url>
    <content type="text"><![CDATA[自出道以来一直想写个单元测试来的，但是一直都在想，终于今天开始写了，也算迈出了小小的一步。 INSTALLATION(安装)全局安装，(非必需，虽然很多文章都要求全局安装，但是廖雪峰大大建议尽量不要全局安装，因为全局模块会影响到所有 Node.js 的工程) npm install --global mocha 项目局部安装 npm install --save-dev mocha 如果 npm 网速比较慢，建议使用 yarn。 GETTING STARTED(起步)新建项目，并在项目中安装 mocha。新建一个 test 文件夹，所有的 test 文件就都放在这个文件夹下，mocha 默认会执行 test 目录下的所有测试，不要去改变默认目录。 在 test.js 中写下如下代码： 12345678var assert = require(&apos;assert&apos;);describe(&apos;Array&apos;, function() &#123; describe(&apos;#indexOf()&apos;, function() &#123; it(&apos;should return -1 when the value is not present&apos;, function() &#123; assert.equal([1,2,3].indexOf(4), -1); &#125;); &#125;);&#125;); 启动终端/命令行工具(git bash)，在当前项目目录下 输入命令 mocha mocha运行结果如下： 12345678910lenovo@LAPTOP-QGCH84J8 MINGW64 /e/workSpace/study/1-单元测试/test$ mocha Array #indexOf() √ should return -1 when the value is not present 1 passing (5ms) 在 package.json 中设置脚本: 123&quot;scripts&quot;: &#123; &quot;test&quot;: &quot;mocha&quot; &#125;, 然后运行测试：npm test mocha 的两个函数mocha 是一个测试框架，即组织并执行测试。写测试的时候要调用两个基本的函数：描述函数 describe()和它函数 it(),在上面的例子中都有用到。 描述函数 describe()是 mocha 将测试分组的一种方法，可以把多个测试嵌套在一个组里，想要嵌套多深就嵌套多深。describe()有两个参数，第一个是测试组的名字，第二个是实际执行的函数。 12345describe(&apos;string name&apos;,function()&#123;// 这里可以嵌套更多的描述函数describe()，也可以写实际的测试。&#125;); 它函数 it()用于单独的测试用例。在一个 describe()中可以嵌套多个 it()函数。it()函数有两个参数，第一个参数是一个字符串说明测试的目的，第二个是实际执行的函数，里面是具体的测试。 123it(&apos;it name&apos;,function()&#123; // 在这里写测试用例&#125;); 编写 js 模块文件的测试脚本在项目中添加 add.js 文件，并在其中添加如下 add 模块代码 123456//add.jsfunction add(a, b) &#123; return a + b;&#125;module.exports = add; 添加 test/add.test.js 文件，并在其中添加 add 的测试脚本 1234567891011// add.test.jsvar assert = require(&apos;assert&apos;);var add = require(&apos;../add.js&apos;);describe(&apos;add函数的测试&apos;, function () &#123; it(&apos;3加4应该等于7&apos;, function () &#123; assert.equal(add(3, 4), 7); &#125;)&#125;) 在终端输入npm test 终端运行结果： 1234567891011121314151617lenovo@LAPTOP-QGCH84J8 MINGW64 /e/workSpace/study/1-单元测试/test$ npm test&gt; @ test E:\workSpace\study\1-单元测试\test&gt; mocha add函数的测试 √ 3加4应该等于7 Array #indexOf() √ should return -1 when the value is not present 2 passing (6ms) 多次调用 done()如果使用基于回调的异步测试，如果 mocha 多次调用 done(),则会抛出 Error，这对于捕获意外的多次回调非常方便。 12345it(&apos;double done&apos;, function(done) &#123; // Calling `done()` twice is an error setImmediate(done); setImmediate(done);&#125;); 运行上述测试将会得到下面的错误信息 12345678910111213141516171819202122232425262728lenovo@LAPTOP-QGCH84J8 MINGW64 /e/workSpace/study/1-单元测试/test$ npm test&gt; @ test E:\workSpace\study\1-单元测试\test&gt; mocha √ double done 1) double done add函数的测试 √ 3加4应该等于7 Array #indexOf() √ should return -1 when the value is not present 3 passing (9ms) 1 failing 1) double done: Error: done() called multiple timesnpm ERR! Test failed. See above for more details. ASSERTIONS(断言)mocha 允许你使用任意你喜欢的断言库，在上面的 add 例子中我们使用了 node.js 内置的 assert 模块作为断言。如果抛出一个错误，它就能够运行。这意味着你能够使用下面的这些仓库，比如： should.jsexpect.jschaibetter-assertunexpect 写不动了，睡起来再写下面的，晚安 异步测试使用 mocha 测试异步代码是再简单不过了。只需要在测试完成的时候调用一下回调函数即可。通过添加一个回调函数(通常命名为 done)给 it()方法，Mocha 就会知道，它应该等这个函数被调用的时候才能完成测试。 1234567891011describe(&apos;User&apos;, function() &#123; describe(&apos;#save()&apos;, function() &#123; it(&apos;should save without error&apos;, function() &#123; var user = new User(&apos;Luna&apos;) user.save(function(err) &#123; if(err) done(err); else done() &#125;) &#125;) &#125;)&#125;) 也可以让事情变得更简单，因为 done()函数接收一个 err，所以，我们可以直接按照下面的使用： 12345678describe(&apos;User&apos;, function() &#123; describe(&apos;#save()&apos;, function() &#123; it(&apos;should save without error&apos;, function(done) &#123; var user = new User(&apos;Luna&apos;) user.save(done) &#125;) &#125;)&#125;) promise 测试同时，除了使用 done()回调函数，你也可以返回一个 Promise。这种方式对于测试那些返回 promies 的方法是实用的。 123456789101112beforeEach(function() &#123; return db.clear() .then(function() &#123; return db.save([tobi, loki, jane]); &#125;);&#125;);describe(&apos;#find()&apos;, function() &#123; it(&apos;respond with matching records&apos;, function() &#123; return db.find(&#123; type: &apos;User&apos; &#125;).should.eventually.have.length(3); &#125;);&#125;); 钩子函数mocha 提供 4 种钩子函数：before()、after()、beforeEach()、afterEach()，这些钩子函数可以用来在用例集/用例函数开始执行之前/结束执行之后，进行一些环境准备或者环境清理的工作。 1234567891011121314151617181920describe(&apos;hooks&apos;, function() &#123; before(function() &#123; // runs before all tests in this block &#125;); after(function() &#123; // runs after all tests in this block &#125;); beforeEach(function() &#123; // runs before each test in this block &#125;); afterEach(function() &#123; // runs after each test in this block &#125;); // test cases&#125;); 愿圣光与你同在！ 如本文有任何问题欢迎指正，谢谢！]]></content>
      <tags>
        <tag>mocha, TDD , 测试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github+hexo搭建个人博客]]></title>
    <url>%2F2018%2F10%2F26%2Fgithub%2Bhexo%2F</url>
    <content type="text"><![CDATA[以前就想折腾这个 github 的博客，怎奈各种加班没有时间，最近比较闲就拿出来折腾了，其实人家还是很兴奋的了啦，折腾出来的时候还是很有成就感的，终于有了自己的博客了，还是自己一手搭建的，虽然其中也踩了不少的坑，傻笑+手舞足蹈，你没有看错，嗯，就是一个疯子。然后这个网易云音乐就舍不得删了，哈哈，至于网易云音乐的外链播放器怎么生成，自己百度吧，哈哈哈。 博客的创建与发布 12345hexo new &apos;文件名&apos; //会在source/_posts创建一个文件名.md文件hexo s // 本地预览效果, https://localhost:4000hexo clean &amp;&amp; hexo g &amp;&amp; hexo d //发布到 github 博客主页地址 Project setup123hexo g //生成hexo s //启动服务 开启本地预览服务 http://localhost:4000 常用hexo命令####常见命令1234567hexo new &quot;postName&quot; # 新建文章hexo new page &quot;postName&quot; # 新建页面hexo generate # 生成静态页面至public目录hexo server # 开启预览访问段港口（默认端口4000）hexo deploy # 部署到githubhexo help # 查看帮助hexo version # 查看hexo的版本 缩写1234hexo n === hexo newhexo g === hexo generatehexo s === hexo serverhexo d === hexo deploy 组合命令12hexo s -g #生成本地预览hexo d -g #生成并上传 主线是按照 hexo 创建个人博客（附加插入音乐、分享、评论、标签页、搜索） 这个教程来做的，多余的话不说了，只做一些补充。 部分补充说明 编辑器我使用的是 vs code，很好用。 这份简书博文中所说的评论系统“多说”已经挂了，参考 hexo+github 打造个人博客系列之评论系统 这篇博文，我选用了 github 的 gitment，分享用 jiathis，百度，但是这两种都是 http 的，不支持 https，我就放过去了，没有再折腾。 搜索这一部分next 主题官网 Algolia 搜索也有介绍,我用的是 local search，还不错的样子 有了这些经验，其他的配置都可以根据next 主题官网自己配置了 next 主题官网 文章图片的插入 遇到的问题 在本地预览 （hexo s） 的时候是成功的，但是部署到 github 上的时候，样式没有加载出来。 通过控制台查看样式文件报 404，是因为 url 地址不对。需要修改_config.yml 文件中的 url 地址和根目录 123456# URL## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://banjingwei.github.io/ban.github.ioroot: /ban.github.io/permalink: :year/:month/:day/:title/permalink_defaults: url 是 github pages 给我们分配的网址 gitment 评论 Error：Not Found通常是 repo 或者 owner 配置不对，owner 是申请时候填的,下面是我的 repo 配置。 1github_repo: 13hua.github.io, # MUST HAVE, The repo you use to store Gitment comments gitment 评论初始化的时候弹出 Error：validation failed。 issue 的标签 label 有长度限制！labels 的最大长度限制是 50 个字符。 修改 next/layout/_third-party/comments/gitment.swig 1id: window.location.pathname 找到上面一行，将 id 的值修改成如下即可： 1id: &apos;&#123;&#123; page.title &#125;&#125;&apos; 但是，title 也有可能超过 50 个字符怎么办呢？修改成日期不就可以了么， 1id: &apos;&#123;&#123; page.date &#125;&#125;&apos; 赞赏功能的配置，图片放在 next/source/images 下，在主题配置文件中做出如下配置，其中 13hua.github.io 是我的 blog 的 repo，改成你自己的即可。 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作！wechatpay: /13hua.github.io/images/wechatpay.jpgalipay: /13hua.github.io/images/alipay.jpg 致谢： hexo 创建个人博客（附加插入音乐、分享、评论、标签页、搜索） hexo+github 打造个人博客系列之评论系统 hexo 的 next 主题个性化配置教程 文章图片的插入 愿圣光与你同在！ 如本文有任何问题欢迎指正，谢谢！]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
